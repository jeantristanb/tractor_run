plugins {
  id 'nf-azure'
}



defaultImage="jeantristanb/tractor_gwas"

manifest {
    homePage = 'https://github.com/jeantristanb/tractor_run'
    description = 'running tractor'
    mainScript = 'main.nf'
}


swarmPort = '2376'
queue = 'batch'

aws {
    accessKey =''
    secretKey =''
    region    ='eu-west-1'
}

cloud {
    imageId = "ami-710b9108"      // specify your AMI id here
    instanceType = "m4.xlarge"
    subnetId = "null"
    sharedStorageId   = "null"
    sharedStorageMount = "/mnt/shared"
    bootStorageSize = "20GB"     // Size of disk for images spawned
    //   instanceStorageMount = ""   // Set a common mount point for images
    //   instanceStorageDevice = ""  // Set a common block device for images
    autoscale {
        enabled = true
        maxInstances = 1
        terminateWhenIdle = true
    }

}


params {

    // Directories
    work_dir                = "/$PWD"
    input_dir               = ""
    output_dir              = "${params.work_dir}/output"
    scripts                 = "${params.work_dir}/scripts"
    output                  = "out"
    output_dir              = "dirout"
    vcf1            = ""
    vcf2            = ""
    vcf            = ""
    bin_bcftools = "bcftools"
    bin_shapeit = "shapeit"
    thr_miss_shapeit=0.90
    memory_shapeit="15GB"
    cpus_shapeit="15GB"

}

profiles {

    // For execution on a local machine, no containerization. -- Default
    standard {
        process.executor = 'local'
    }
  slurm {
   process.executor = 'slurm'
   process.queue = queue
 }
    // Execute pipeline with Docker locally
    docker {
        process.executor = 'local'
        docker.remove      = true
        docker.runOptions  = '--rm'
        docker.registry    = 'quay.io'
        docker.enabled     = true
        docker.temp        = 'auto'
        docker.fixOwnership= true
        docker.process.executor = 'local'
    }


    // Execute pipeline with Docker Swarm setup
    dockerSwarm {
        docker.remove      = true
        docker.runOptions  = '--rm'
        docker.registry    = 'quay.io'
        docker.enabled     = true
        docker.temp        = 'auto'
        docker.fixOwnership= true
        docker.process.executor = 'local'
        docker.engineOptions = "-H :$swarmPort"
    }

    // For execution on a PBS scheduler, no containerization.
    pbs {
        process.executor = 'pbs'
        process.queue = queue
    }
    // For execution on a PBS scheduler with containerization.
    pbsDocker {

        process.executor = 'pbs'
        docker.remove      = true
        docker.runOptions  = '--rm'
        docker.registry    = 'quay.io'
        docker.enabled     = true
        docker.temp        = 'auto'
        docker.fixOwnership= true
    }


    // For execution on a SLURM scheduler, no containerization.
    slurm {
        process.executor = 'slurm'
        process.queue = queue
    }


    // For execution on a PBS scheduler with containerisation.
    slurmDocker {
        process.executor = 'slurm'
        docker.remove      = true
        docker.runOptions  = '--rm'
        docker.registry    = 'quay.io'
        docker.enabled     = true
        docker.temp        = 'auto'
        docker.fixOwnership= true
    }
    singularity.cacheDir = "${HOME}/.singularity"

    singularity {
        singularity.autoMounts = true
        singularity.enabled = true
        process.executor = 'local'
     }

    // For execution on a SLURM scheduler with singularity
    slurmSingularity {

        process.executor = 'slurm'
        singularity.autoMounts = true
        singularity.enabled = true
        singularity.runOption = "--cleanenv"
        process.queue = queue

    }

    slurmDocker {
        process.executor = 'slurm'
        process.queue = queue
        docker.remove      = true
        docker.runOptions  = '--rm'
        docker.registry    = 'quay.io'
        docker.enabled     = true
        docker.temp        = 'auto'
        docker.fixOwnership= true

    }
    // For execution on a PBS scheduler, no containerization.
    pbs {
        process.executor = 'pbs'
        process.queue = queue
    }

    // For execution on a PBS scheduler with containerization.
    pbsDocker {

        process.executor = 'pbs'
        docker.remove      = true
        docker.runOptions  = '--rm'
        docker.registry    = 'quay.io'
        docker.enabled     = true
        docker.temp        = 'auto'
        docker.fixOwnership= true
  }

  // For execution on Azure Batch
  azurebatch {
        process.executor = 'azurebatch'
  }

}
process {
    container = defaultImage
}

executor{
    exitStatusReadTimeoutMillis = 270000*50
}




